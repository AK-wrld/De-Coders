->in nextJs we have file based routing. so just make components and they will be automatically get an endpoint
->inside pages folder we can add files and they will get the endpoint = /fileName
->Nested Routes = to make nested routes inside pages folder add a new folder and inside that add a file. endpoint will be /folderName/fileName
->Dynamic Router = which in which we can add endpoint dynamically. created using [] and useRouter.

->next/head: we can set <Head> of html using next/head. head will contain title meta script link etc
->next/script: we can also set <Script> using next/script. this will help us with lazy load of js script to improve speed by giving stratergy attribute as lazyOnload

->for adding classes use className = {styles.class_name}

Linking of pages
2 ways: 1. <a> tag 2. <Link> component(import from next->link)
diff: anchor tag reloads the page link component doesnt

css
next supports component level css i.e we can give css to each component by creating a new css file for that component.
Also to prevent collision between 2 same classNames for which different css has been written in diff css files, next js imports files as modules
i.e each module will act like an object containing all the classNames as key and classname+unique string as value pairs
while importing any stylesheet the name given as reference(refName) to the style sheet will act as the classname = {refName.className}
Global css can be loaded by importing '../whatever.css' in _app.js(entry point of our next app)

To add internal css(writing css inside the same component file) inside each component we use style jsx(component level styling...for global use add global attribute to style jsx tag)
->to import bootstrap add the in _app.js in pages folder by adding a head and a script tag
->importing modular components in next is same as in react
->However if we want that all the pages have that modular component then rather than adding them individually to the pages, we can add it in _app.js

->It is possible to make endpoints directly inside nextJs
-> inside the pages folder there is an api folder where we can make our endpoints which act as a backend endpoint

Making SEO friendly pages
Done using 2 ways: server side rendering and static site generation
->server side rendering: Server-side rendering means using a server to generate HTML from JavaScript modules in response to a URL request. 
in other words once a req is sent from client side , the page which is requested is first hydrated with html from JavaScript in server then sent back to the client
content pahle se populate hoke aega jisse ki SEO friendly website ban ske

->Static Generation describes the process of compiling and rendering a website or app at build time.
The output is a bunch of static files, including the HTML file itself and assets like JavaScript and CSS. Simply next pahle ek static site(jo change na ho) banaega content ka 
aur usse deploy krdega aur wo client utha lega jahase bhi deploy kra hai.

In server side rendering, changing data in real time will be reflected on the page itself.
In static site generation, changing data in real time will not be reflected on the page itself as the content which was used to make a static page
is already fixed.so server will have to make a new static page to show the changed content.
Hence static site genration is used in websites like blogposts where data doesnt change frequently while server side rendering is used for the 
websites like social media platforms where data changes all the time

->getserversideprops() used for server side rendering